/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ga.master.ga.gui;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import edu.ga.master.ga.algo.GAEngine;
import edu.ga.master.ga.cli.ConsoleColors;
import edu.ga.master.ga.exceptions.BatteryException;
import edu.ga.master.ga.exceptions.GAInconsistencyException;
import edu.ga.master.ga.exceptions.NoGeneratedJobsException;
import edu.ga.master.ga.gui.events.EventManager;
import edu.ga.master.ga.gui.events.SolutionListener;
import edu.ga.master.ga.model.*;
import edu.ga.master.ga.model.impl.RealJobGenerator;
import edu.ga.master.ga.utils.Settings;
import edu.ga.master.ga.utils.SimpleAudioPlayer;
import it.cnr.istc.icv.engine.*;
import it.cnr.istc.icv.exceptions.TypeDataMismatchException;
import it.cnr.istc.icv.logic.ICVAnnotation;
import it.cnr.istc.icv.test.BooleanDataSupporter;
import it.cnr.istc.icv.test.LinearBooleanDataSupporter;
import it.cnr.istc.icv.test.LinearDataSupporter;
import it.cnr.istc.icv.test.TimeValueSupporterClass;

import java.awt.*;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;

/**
 * @author sommovir
 */
public class ProcessViewerFrame extends javax.swing.JFrame implements SolutionListener {

    public static final String LIGHT_THEME = "FlatLaf IntelliJ";
    public static final String DARK_THEME = "FlatLaf Darcula";
    private float startFitness;
    private float currentFitness;
    final static EmbeddablePanel panel = new EmbeddablePanel();
    int x = 0;
    private int avgEach = 10;
    private long startTime;

    /**
     * Creates new form ProcessViewerFrame
     */
    public ProcessViewerFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        EventManager.getInstance().addSolutionListener(this);
        Settings.getInstance().setViewResults(this.jCheckBox_preview.isSelected());
        panel.getMixedPanel().LEFT_MARGIN = 40;
        panel.getMixedPanel().setStartRange(0);
        panel.getMixedPanel().setEndRange(GAEngine.getInstance().getMaxCycle());
        panel.getMixedPanel().setShowDate(false);
        panel.getMixedPanel().setBackground(Color.WHITE);
        panel.getMixedPanel().setZoomEnable(true);
        panel.setXTooltipLabel("Cicli");
        panel.setYTooltipLabel("Fitness");

        LinearDataSupporter s = new LinearDataSupporter("Soluzione");
        s.setColorToSubChart("Best Fitness", Color.RED);
        s.setColorToSubChart("AVG Fitness", Color.BLUE);
        s.setDotVisible(true);
        s.setSubChartWithDots("Best Fitness", true);
        s.setSubChartWithDots("AVG Fitness", false);
        s.setOrder(1);
        s.setDiscret(false);
//        s.setMaxValueToShow(10);
//        s.setMinValueToShow(0);

//        s.
//        LinearDataSupporter s2 = new LinearDataSupporter("AVG fitness");
//        s2.setOrder(2);
//        s2.setDiscret(false);
        panel.getMixedPanel().addDataBar(s);
//        panel.getMixedPanel().addDataBar(s2);
//        MyLayer<JPanel> layerUI = new ZoomLabeledLayer(panel);
//        JPanel containerP = new JPanel();
//        containerP.setLayout(new GridLayout(0, 1));
//        containerP.add(panel);
//
//        MyJLayer<JPanel> jlayer = new MyJLayer<JPanel>(panel, layerUI);
//        containerP.add(jlayer);
        this.jScrollPane1.setViewportView(panel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jCheckBox_AVG = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel_Iterazioni = new javax.swing.JLabel();
        jLabel_solutionAGV = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel_startFitness = new javax.swing.JLabel();
        jCheckBox_preview = new javax.swing.JCheckBox();
        jTextField_elapsedTime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel_currentFitness1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel_nothing = new javax.swing.JPanel();
        jLabel_runningMessage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox_AVG.setSelected(true);
        jCheckBox_AVG.setText("AVG");
        jCheckBox_AVG.setName(""); // NOI18N
        jCheckBox_AVG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_AVGActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("EsapsedTime: ");

        jLabel2.setText("Start Fitness");

        jLabel1.setText("Iterations");

        jLabel_Iterazioni.setBackground(new java.awt.Color(51, 51, 51));
        jLabel_Iterazioni.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel_Iterazioni.setForeground(new java.awt.Color(255, 255, 0));
        jLabel_Iterazioni.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Iterazioni.setText("1/300");
        jLabel_Iterazioni.setOpaque(true);

        jLabel_solutionAGV.setBackground(new java.awt.Color(51, 51, 51));
        jLabel_solutionAGV.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel_solutionAGV.setForeground(new java.awt.Color(51, 204, 0));
        jLabel_solutionAGV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_solutionAGV.setText("unknown");
        jLabel_solutionAGV.setOpaque(true);

        jLabel5.setText("Current Fitness");

        jLabel_startFitness.setBackground(new java.awt.Color(51, 51, 51));
        jLabel_startFitness.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel_startFitness.setForeground(new java.awt.Color(255, 255, 0));
        jLabel_startFitness.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_startFitness.setText("143");
        jLabel_startFitness.setOpaque(true);

        jCheckBox_preview.setText("Preview Result in Console");
        jCheckBox_preview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_previewActionPerformed(evt);
            }
        });

        jTextField_elapsedTime.setBackground(new java.awt.Color(0, 0, 0));
        jTextField_elapsedTime.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField_elapsedTime.setForeground(new java.awt.Color(0, 255, 255));
        jTextField_elapsedTime.setText("-");

        jLabel4.setText("Number of AGV of the Solution:");

        jLabel_currentFitness1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel_currentFitness1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel_currentFitness1.setForeground(new java.awt.Color(51, 204, 0));
        jLabel_currentFitness1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_currentFitness1.setText("143");
        jLabel_currentFitness1.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Iterazioni, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel_startFitness, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox_AVG)
                        .addGap(55, 55, 55)
                        .addComponent(jCheckBox_preview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_solutionAGV, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel_currentFitness1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_elapsedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField_elapsedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel_Iterazioni)
                        .addComponent(jLabel2)
                        .addComponent(jLabel_startFitness)
                        .addComponent(jLabel5)
                        .addComponent(jLabel_currentFitness1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel_solutionAGV))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox_AVG)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_preview))
                .addContainerGap())
        );

        jToolBar1.setRollover(true);

        jButton3.setText("PLAY");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setText("START");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);

        jButton5.setText("VIEW");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel_nothing.setBackground(new java.awt.Color(51, 51, 51));

        jLabel_runningMessage.setText("nothing");

        javax.swing.GroupLayout jPanel_nothingLayout = new javax.swing.GroupLayout(jPanel_nothing);
        jPanel_nothing.setLayout(jPanel_nothingLayout);
        jPanel_nothingLayout.setHorizontalGroup(
            jPanel_nothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_nothingLayout.createSequentialGroup()
                .addGap(363, 363, 363)
                .addComponent(jLabel_runningMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(337, 337, 337))
        );
        jPanel_nothingLayout.setVerticalGroup(
            jPanel_nothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_nothingLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel_runningMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(38, 38, 38))
        );

        jSplitPane1.setLeftComponent(jPanel_nothing);
        jSplitPane1.setRightComponent(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1194, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox_AVGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_AVGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_AVGActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jCheckBox_previewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_previewActionPerformed
        Settings.getInstance().setViewResults(this.jCheckBox_preview.isSelected());
    }//GEN-LAST:event_jCheckBox_previewActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //PLAY

        //start a swing thread
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                //start the game
                System.out.println(ConsoleColors.ANSI_YELLOW + "Hello World!" + ConsoleColors.ANSI_RESET);
                System.out.println("Ciao Luca come va tutt'appost ?");
                Settings.getInstance().setElitism(10);
                GAEngine.getInstance().setMaxCycle(1500);
                Settings.getInstance().setVerbose(false);
                Settings.getInstance().setBatteryCapacity(40);
                Settings.getInstance().setMaxTime(10);
                Settings.getInstance().setPopulationSize(100);
                Settings.getInstance().setNumberOfJobs(40);
                Settings.getInstance().setKalergi(0.4f);
                Settings.getInstance().setMaximumEnergyOfJob(15);
                JobManager.getInstance().init(new RealJobGenerator());
                JobManager.getInstance().generateJobs();
                try {
                    JobManager.getInstance().printJobs();
                } catch (NoGeneratedJobsException ex) {
                    ex.printStackTrace();
                }
                System.out.println("------------------------------------------");
                System.out.println("Current Battery Capacity = " + Settings.getInstance().getBatteryCapacity());
                System.out.println("------------------------------------------");
//            Individual individual = new Individual(Settings.getInstance().getAgvQuantity());
//            individual.calculateFitness();
//            individual.print();

                System.out.println("********************************************");
                System.out.println(" creation of population of size 100");
                System.out.println("********************************************");
                Population population = new Population.Builder() //il size è settato in settings
                        .distribution(Population.DISTRIBUTION.EQUAL)
                        .minimumAGV(2)
                        .maximumAGV(4)
                        .build();

                if (Settings.getInstance().getNumberOfJobs() <= 15) {
                    population.print(false);
                } else {
                    population.printWithManyJobs();
                }
                try {
                    System.out.printf("RUNNIGN ALGORITHM WITH %d CYCLES %n", GAEngine.getInstance().getNumberOfCycles());
                    ProcessViewerFrame.this.jButton3.setEnabled(false);
                    GAEngine.getInstance().run(population);

                    System.out.println("********************************************");
                    System.out.println(" population after algorithm:");
                } catch (GAInconsistencyException ex) {
                    ex.printStackTrace();
                } catch (BatteryException e) {
                    throw new RuntimeException(e);
                }

                if (Settings.getInstance().getNumberOfJobs() <= 15) {
                    population.print(true);
                } else {
                    population.printWithManyJobs();
                }
                EventManager.getInstance().end(population.getIndividuals()[0]);
                return null;
            }
        };
        worker.execute();


    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            FlatDarculaLaf.installLafInfo();
            FlatIntelliJLaf.installLafInfo();
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                System.out.println("---- lf -> " + info.getName());
                if (LIGHT_THEME.equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcessViewerFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcessViewerFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcessViewerFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessViewerFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessViewerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox_AVG;
    private javax.swing.JCheckBox jCheckBox_preview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel_Iterazioni;
    private javax.swing.JLabel jLabel_currentFitness1;
    private javax.swing.JLabel jLabel_runningMessage;
    private javax.swing.JLabel jLabel_solutionAGV;
    private javax.swing.JLabel jLabel_startFitness;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_nothing;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField_elapsedTime;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void start(float initialFitness) {
        this.startFitness = initialFitness;
        this.x = 0;
        panel.getMixedPanel().setEndRange(GAEngine.getInstance().getMaxCycle());
        this.jLabel_Iterazioni.setText("0/" + GAEngine.getInstance().getMaxCycle() + " ");
        this.jLabel_startFitness.setText("" + initialFitness + " ");
        this.jLabel_currentFitness1.setText("<html><font color = red>" + initialFitness + "</font>");
        panel.getMixedPanel().setEndRange(GAEngine.getInstance().getMaxCycle());
        panel.getMixedPanel().clearLinearDataBar("Soluzione");
        panel.getMixedPanel().setNowLineVisible(true);
        TimeValueSupporterClass ds1 = new TimeValueSupporterClass(initialFitness, "Best Fitness", new Date(x));
        try {
            panel.getMixedPanel().addLinearData("Soluzione", ds1, true);
        } catch (TypeDataMismatchException ex) {
            ex.printStackTrace();
        }
        this.jTextField_elapsedTime.setText("running..");
        this.jSplitPane1.setLeftComponent(this.jPanel_nothing);
        this.jLabel_runningMessage.setForeground(Color.YELLOW);
        this.jLabel_runningMessage.setText("Calculating new solution..");
        //set start time
        this.startTime = System.currentTimeMillis();
        this.jLabel_startFitness.setText("" + initialFitness + " ");


    }

    @Override
    public void end(Individual bestone) {
        //print best solution
        System.out.println("Best solution found:");
        System.out.println("-----------------------------------------------------------------------------------------");
        LinkedList<AssignedJob> assignedJobbini = bestone.getAssignedJobs();
        for(AssignedJob aj : assignedJobbini){
            System.out.println(aj);
        }
        System.out.println("-----------------------------------------------------------------------------------------");


        this.jButton3.setEnabled(true);
        //calculate end time
        this.jLabel_solutionAGV.setText(bestone.getNumAGV() + "");
        long endTime = System.currentTimeMillis();
        long time = endTime - startTime;
        //format time in mm:ss:sss
        String timeString = String.format("%02d:%02d:%03d", TimeUnit.MILLISECONDS.toMinutes(time),
                TimeUnit.MILLISECONDS.toSeconds(time) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time)),
                time - TimeUnit.SECONDS.toMillis(TimeUnit.MILLISECONDS.toSeconds(time)));

        this.jTextField_elapsedTime.setText("" + timeString + " ms");
        this.jLabel_runningMessage.setForeground(Color.GREEN);
        this.jLabel_runningMessage.setText("Finished!");

        MixedDataPanel mdp = new MixedDataPanel();
        mdp.setEndRange(GAEngine.getInstance().getMaxCycle());

        mdp.setBackgroundChartColor(Color.WHITE);
        mdp.setBackground(Color.WHITE);

        long nowTime = new Date().getTime();

        float makespan = bestone.getMakespan();

        mdp.setStartRange(nowTime);
        mdp.setEndRange(nowTime + (long) (makespan * 60 * 1000)); //trasformo le unità del makespan in minuti
        mdp.setZoomEnable(true);



//        LinearBooleanDataSupporter b1 = new LinearBooleanDataSupporter("Door Contact");
//        BooleanDataSupporter bs1 = new BooleanDataSupporter(new Date(113, 9, 5, 9, 30, 0), true);
//        BooleanDataSupporter bs2 = new BooleanDataSupporter(new Date(113, 9, 5, 11, 0, 0), false);
//        b1.addData(bs1);
//        b1.addData(bs2);
//        Map<Boolean, String> bMap = new HashMap<Boolean, String>();
//        bMap.put(true, "Aperto e riaperto più e più volte .. ciao come va? ");
////            bMap.put(false, "Chiuso");
//        b1.mapValues("Door Contact", bMap);
//        mdp.addDataBar(b1);



        //get all available agv
        int numAGV = bestone.getNumAGV();

        LinkedList<AssignedJob>  allJobs = bestone.getAssignedJobs();
        //map all assigned Job for each agv
        HashMap<Integer, LinkedList<AssignedJob>> dataByAvgMap = new HashMap<Integer, LinkedList<AssignedJob>>();
        try {
            //assign all jobs to the map
            for (AssignedJob aj : allJobs) {
                //if the map doesn't contain the key, create a new list
                if (!dataByAvgMap.containsKey(aj.getAgv().getId())) {
                    dataByAvgMap.put(aj.getAgv().getId(), new LinkedList<AssignedJob>());
                }
                System.out.println("AGV: " + aj.getAgv().getId()+ " Job: " + aj.getJob());
                dataByAvgMap.get(aj.getAgv().getId()).add(aj);
            }

        }catch(Exception e){
            e.printStackTrace();
        }

        for (Integer agvId : dataByAvgMap.keySet()) {
            LinearBooleanDataSupporter bGino = new LinearBooleanDataSupporter("AGV " + (agvId));
//            BooleanDataSupporter bs11 = new BooleanDataSupporter(new Date(113, 9, 5, 10, 0, 0), true);
//            BooleanDataSupporter bs22 = new BooleanDataSupporter(new Date(113, 9, 5, 11, 30, 0), false);
//            bGino.addData(bs11);
//            bGino.addData(bs22);
            Map<Boolean, String> bMap2 = new HashMap<Boolean, String>();
            bMap2.put(true, "Working");
            bMap2.put(false, "Reloading");
            bGino.mapValues("AGV " + (agvId), bMap2);
            mdp.addDataBar(bGino);
            LinkedList<AssignedJob> assignedJobs = dataByAvgMap.get(agvId);
            for (AssignedJob aj : assignedJobs) {
                if(aj.getJob() instanceof WorkJob) {
                    //nowTime + (long) (makespan * 60 * 1000)
                    BooleanDataSupporter bs1 = new BooleanDataSupporter(new Date(nowTime + (long) (aj.getStartTime() * 60 * 1000)), true);
                    BooleanDataSupporter bs2 = new BooleanDataSupporter(new Date(nowTime + (long) (aj.getEndTime() * 60 * 1000)), false);
                    bGino.addData(bs1);
                    bGino.addData(bs2);
                    mdp.addICVAnnotation(new ICVAnnotation("AGV "+(agvId), bs1.getTimeStamp().getTime(), "J"+(aj.getJob().getId()),true));
                }else{
//                    BooleanDataSupporter bs1 = new BooleanDataSupporter(new Date(aj.getStartTime()), false);
//                    BooleanDataSupporter bs2 = new BooleanDataSupporter(new Date(aj.getEndTime()), true);
//                    bGino.addData(bs1);
//                    bGino.addData(bs2);
                    mdp.addICVAnnotation(new ICVAnnotation("AGV "+(agvId), new Date(nowTime + (long) (aj.getStartTime() * 60 * 1000)).getTime(), "R"+(aj.getJob().getId()),true));
                }

                //J or R if job is working or reloading
//                String label = "J";
//                if(aj.getJob() instanceof ReloadJob){
//                    label = "R";
//                }
//                mdp.addICVAnnotation(new ICVAnnotation("AGV "+(agvId), bs11.getTimeStamp().getTime(), label+(aj.getJob().getId()),true));
            }

//            mdp.addICVAnnotation(new ICVAnnotation("Gino", bs1.getTimeStamp().getTime(), "amico frizz", true));
        }
        MyLayer<JPanel> layerUI = new ZoomLayer(mdp);
        JPanel containerP = new JPanel();
        containerP.setLayout(new GridLayout(0, 1));
        containerP.add(mdp);

        MyJLayer<JPanel> jlayer = new MyJLayer<JPanel>(mdp, layerUI);
        containerP.add(jlayer);

        this.jSplitPane1.setLeftComponent(containerP);
        mdp.repaint();


    }


    // this.jLabel_currentFitness.setText("" + bestone.getFitness() + " ");

    @Override
    public void newImprovement(Individual bestone, float newFitness) {
        this.currentFitness = newFitness;
        this.jLabel_currentFitness1.setText("" + newFitness + " ");
        TimeValueSupporterClass ds1 = new TimeValueSupporterClass(newFitness, "Best Fitness", new Date(x));
        try {
            panel.getMixedPanel().addLinearData("Soluzione", ds1, true);
            SimpleAudioPlayer audioPlayer =
                    new SimpleAudioPlayer();
            audioPlayer.load("./src/main/resources/audios/warning.wav");
            audioPlayer.play();
        } catch (TypeDataMismatchException ex) {
            ex.printStackTrace();
        } catch (UnsupportedAudioFileException e) {
            throw new RuntimeException(e);
        } catch (LineUnavailableException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void nextCycle(int cycle) {
        cycle++;
        this.jLabel_Iterazioni.setText(cycle + "/" + GAEngine.getInstance().getMaxCycle() + " ");
        x = cycle;

        panel.getMixedPanel().setFloatableNow(x);

    }

    @Override
    public void newAVG(float avg) {
        if (this.jCheckBox_AVG.isSelected()) {
            if (x % this.avgEach == 0) {
                TimeValueSupporterClass ds1 = new TimeValueSupporterClass(avg, "AVG Fitness", new Date(x));
                try {
                    panel.getMixedPanel().addLinearData("Soluzione", ds1, true);
                } catch (TypeDataMismatchException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    @Override
    public void kalergi() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
